Refer to the workaround for the Predict Soccer Match Outcomes with BigQuery ML: Challenge Lab

Task 1:

Go to BigQuery using the navigation menu and click on the 3 dot menu for the soccer dataset from the left side & click on create table option. Use the information given on the lab page in Task 1 for creating a table.
 
 
Task 2:
 
SELECT
playerId,
(Players.firstName || ' ' || Players.lastName) AS playerName,
COUNT(id) AS numPKAtt,
SUM(IF(101 IN UNNEST(tags.id), 1, 0)) AS numPKGoals,
SAFE_DIVIDE(
SUM(IF(101 IN UNNEST(tags.id), 1, 0)),
COUNT(id)
) AS PKSuccessRate
FROM
`soccer.EVENT_NAME` Events
LEFT JOIN
`soccer.players` Players ON
Events.playerId = Players.wyId
WHERE
eventName = 'Free Kick' AND
subEventName = 'Penalty'
GROUP BY
playerId, playerName
HAVING
numPkAtt >= 5
ORDER BY
PKSuccessRate DESC, numPKAtt DESC
 
---------------------------------------------------------------------------------------------------------
 
Task 3:
 
 
WITH
Shots AS
(
SELECT
*,
/* 101 is known Tag for 'goals' from goals table */
(101 IN UNNEST(tags.id)) AS isGoal,
/* Translate 0-100 (x,y) coordinate-based distances to absolute positions
using "average" field dimensions of 105x68 before combining in 2D dist calc */
SQRT(
POW(
(100 - positions[ORDINAL(1)].x) * VALUE,
2) +
POW(
(60 - positions[ORDINAL(1)].y) * VALUE,
2)
) AS shotDistance
FROM
`soccer.EVENT_NAME`
WHERE
/* Includes both "open play" & free kick shots (including penalties) */
eventName = 'Shot' OR
(eventName = 'Free Kick' AND subEventName IN ('Free kick shot', 'Penalty'))
)
SELECT
ROUND(shotDistance, 0) AS ShotDistRound0,
COUNT(*) AS numShots,
SUM(IF(isGoal, 1, 0)) AS numGoals,
AVG(IF(isGoal, 1, 0)) AS goalPct
FROM
Shots
WHERE
shotDistance <= 50
GROUP BY
ShotDistRound0
ORDER BY
ShotDistRound0
 
---------------------------------------------------------------------------------------------------------
 
 
Run the query for Task 4.1 & 4.2 from the lab instruction page

Task 4.3:

 
CREATE MODEL `MODEL_NAME`
OPTIONS(
model_type = 'LOGISTIC_REG',
input_label_cols = ['isGoal']
) AS
SELECT
Events.subEventName AS shotType,
/* 101 is known Tag for 'goals' from goals table */
(101 IN UNNEST(Events.tags.id)) AS isGoal,
`soccer.GetShotDistanceToGoalNUMBER`(Events.positions[ORDINAL(1)].x,
Events.positions[ORDINAL(1)].y) AS shotDistance,
`soccer.GetShotAngleToGoalNUMBER`(Events.positions[ORDINAL(1)].x,
Events.positions[ORDINAL(1)].y) AS shotAngle
FROM
`soccer.eventsNUMBER` Events
LEFT JOIN
`soccer.matches` Matches ON
Events.matchId = Matches.wyId
LEFT JOIN
`soccer.competitions` Competitions ON
Matches.competitionId = Competitions.wyId
WHERE
/* Filter out World Cup matches for model fitting purposes */
Competitions.name != 'World Cup' AND
/* Includes both "open play" & free kick shots (including penalties) */
(
eventName = 'Shot' OR
(eventName = 'Free Kick' AND subEventName IN ('Free kick shot', 'Penalty'))
)
;
 
---------------------------------------------------------------------------------------------------------
 
 
Task 5:
 
 
SELECT
predicted_isGoal_probs[ORDINAL(1)].prob AS predictedGoalProb,
* EXCEPT (predicted_isGoal, predicted_isGoal_probs),
FROM
ML.PREDICT(
MODEL `MODEL_NAME`,
(
SELECT
 Events.playerId,
 (Players.firstName || ' ' || Players.lastName) AS playerName,
 Teams.name AS teamName,
 CAST(Matches.dateutc AS DATE) AS matchDate,
 Matches.label AS match,
/* Convert match period and event seconds to minute of match */
 CAST((CASE
   WHEN Events.matchPeriod = '1H' THEN 0
   WHEN Events.matchPeriod = '2H' THEN 45
   WHEN Events.matchPeriod = 'E1' THEN 90
   WHEN Events.matchPeriod = 'E2' THEN 105
   ELSE 120
   END) +
   CEILING(Events.eventSec / 60) AS INT64)
   AS matchMinute,
 Events.subEventName AS shotType,
 /* 101 is known Tag for 'goals' from goals table */
 (101 IN UNNEST(Events.tags.id)) AS isGoal,
 
 `soccer.GetShotDistanceToGoalNUMBER`(Events.positions[ORDINAL(1)].x,
     Events.positions[ORDINAL(1)].y) AS shotDistance,
 `soccer.GetShotAngleToGoalNUMBER`(Events.positions[ORDINAL(1)].x,
     Events.positions[ORDINAL(1)].y) AS shotAngle
FROM
 `soccer.eventsNUMBER` Events
LEFT JOIN
 `soccer.matches` Matches ON
     Events.matchId = Matches.wyId
LEFT JOIN
 `soccer.competitions` Competitions ON
     Matches.competitionId = Competitions.wyId
LEFT JOIN
 `soccer.players` Players ON
     Events.playerId = Players.wyId
LEFT JOIN
 `soccer.teams` Teams ON
     Events.teamId = Teams.wyId
WHERE
 /* Look only at World Cup matches to apply model */
 Competitions.name = 'World Cup' AND
 /* Includes both "open play" & free kick shots (but not penalties) */
 (
   eventName = 'Shot' OR
   (eventName = 'Free Kick' AND subEventName IN ('Free kick shot'))
 ) AND
 /* Filter only to goals scored */
 (101 IN UNNEST(Events.tags.id))
)
)
ORDER BY
predictedgoalProb
